package com.snd.CanvasGoogleConnection.CanvasConnection;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.client.util.DateTime;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.calendar.Calendar;
import com.google.api.services.calendar.CalendarScopes;
import com.google.api.services.calendar.model.Event;
import com.google.api.services.calendar.model.EventDateTime;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.security.GeneralSecurityException;
import java.util.Collections;
import java.util.List;

public class GoogleCalenderConnection {
    private static final String APPLICATION_NAME = "Google Calendar API Java";
    private static final JsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();
    private static final String TOKENS_DIRECTORY_PATH = "tokens";

    private static final List<String> SCOPES = 
        Collections.singletonList(CalendarScopes.CALENDAR);
    private static final String CREDENTIALS_FILE_PATH = "googleApiCredentials.json"; //have to fix this, need to fix the maven project, there is no resource folder because of the archetype i used
    
    private Calendar service;

    public GoogleCalenderConnection() throws IOException, GeneralSecurityException {
        final NetHttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
        service = new Calendar.Builder(httpTransport, JSON_FACTORY, getCredentials(httpTransport))
            .setApplicationName(APPLICATION_NAME)
            .build();
    }

    private Credential getCredentials(final NetHttpTransport httpTransport) throws IOException {
        // Load client secrets
        InputStream in = GoogleCalenderConnection.class.getClassLoader().getResourceAsStream(CREDENTIALS_FILE_PATH);
        if (in == null) {
            throw new FileNotFoundException("Resource not found: " + CREDENTIALS_FILE_PATH);
        }
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));

        // Build flow and trigger user authorization request
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
            httpTransport, JSON_FACTORY, clientSecrets, SCOPES)
            .setDataStoreFactory(new FileDataStoreFactory(new java.io.File(TOKENS_DIRECTORY_PATH)))
            .setAccessType("offline")
            .build();
        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setPort(8888).build();
        return new AuthorizationCodeInstalledApp(flow, receiver).authorize("user");
    }

    public Event createEvent(String summary, String description, 
                              DateTime startTime, DateTime endTime) throws IOException {
    	System.out.println("creating event" + startTime);
        Event event = new Event()
            .setSummary(summary)
            .setDescription(description);

        EventDateTime start = new EventDateTime()
            .setDateTime(startTime)
            .setTimeZone("PST");
        event.setStart(start);

        EventDateTime end = new EventDateTime()
            .setDateTime(endTime)
            .setTimeZone("PST");
        event.setEnd(end);

        return service.events().insert("primary", event).execute();
    }

    public List<Event> listUpcomingEvents(int maxResults) throws IOException {
        return service.events().list("primary")
            .setMaxResults(maxResults)
            .setTimeMin(new DateTime(System.currentTimeMillis()))
            .setOrderBy("startTime")
            .setSingleEvents(true)
            .execute()
            .getItems();
    }
    
    public static void main(String[] args) {
        try {
        	GoogleCalenderConnection manager = new GoogleCalenderConnection();
            
            // Create an event
            DateTime startTime = new DateTime(System.currentTimeMillis() + 86400000); // 24 hours from now
            DateTime endTime = new DateTime(System.currentTimeMillis() + 90000000);   // ~26 hours from now
            
            Event newEvent = manager.createEvent(
                "Team Meeting", 
                "Quarterly planning session", 
                startTime, 
                endTime
            );
            System.out.println("Event created: " + newEvent.getHtmlLink());

            // List upcoming events
            List<Event> events = manager.listUpcomingEvents(10);
            for (Event event : events) {
                System.out.println(event.getSummary() + ": " + 
                    (event.getStart().getDateTime() != null 
                     ? event.getStart().getDateTime() 
                     : event.getStart().getDate()));
            }
        } catch (IOException | GeneralSecurityException e) {
            e.printStackTrace();
        }
    }
}
